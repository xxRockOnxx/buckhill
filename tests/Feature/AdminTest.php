<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AdminTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_create_admin_user()
    {
        // Arrange
        $authUser = User::factory()->create([
            'is_admin' => true,
        ]);

        $user = $user = User::factory()->make();

        $this->actingAs($authUser);

        // Act
        $response = $this->sendCreateAdminRequest($user);

        // Assert
        $data = $user->only([
            'first_name',
            'last_name',
            'email',
            'address',
            'phone_number',
        ]);

        // These fields are generated by the server.
        $data['uuid'] = true;
        $data['token'] = true;
        $data['created_at'] = true;
        $data['updated_at'] = true;

        $this->assertSuccessResponseMacro($response, $data);

        // Make sure the user is actually created in the database
        $this->assertDatabaseHas('users', [
            'email' => $user->email,
            'is_admin' => true,
        ]);
    }

    public function test_cannot_create_admin_user_as_guest()
    {
        // Arrange
        $user = $user = User::factory()->make();

        // Act
        $response = $this->sendCreateAdminRequest($user);

        // Assert
        $this->assertErrorResponseMacro($response, 401, 'Unauthorized');
    }

    public function test_cannot_create_admin_user_as_non_admin()
    {
        // Arrange
        $authUser = User::factory()->create([
            'is_admin' => false,
        ]);

        $user = $user = User::factory()->make();

        $this->actingAs($authUser);

        // Act
        $response = $this->sendCreateAdminRequest($user);

        // Assert
        $this->assertErrorResponseMacro($response, 401, 'Unauthorized');
    }

    public function test_can_login_as_admin()
    {
        // Arrange
        $user = User::factory()->create([
            'is_admin' => true,
        ]);

        // Act
        $this->freezeTime();

        $response = $this->sendLoginRequest($user->email, 'password');

        // Assert
        $this->assertSuccessResponseMacro($response, [
            'token' => true,
        ]);

        // Database does not store microseconds, so we need to remove it.
        $now = now()->microsecond(0);

        $this->assertTrue($now->eq($user->fresh()->last_login_at));
    }

    public function test_cannot_login_as_admin_with_regular_user()
    {
        // Arrange
        $user = User::factory()->create([
            'is_admin' => false,
        ]);

        // Act
        $response = $this->sendLoginRequest($user->email, 'password');

        // Assert
        $this->assertErrorResponseMacro($response, 422, 'Failed to authenticate user');
    }

    public function test_cannot_login_with_invalid_credentials()
    {
        // Act
        $response = $this->sendLoginRequest('', '');

        // Assert
        $this->assertErrorResponseMacro($response, 422, 'Failed to authenticate user');
    }

    private function sendCreateAdminRequest(User $user)
    {
        return $this->postJson('/api/v1/admin/create', [
            'first_name' => $user->first_name,
            'last_name' => $user->last_name,
            'email' => $user->email,
            'password' => 'password',
            'password_confirmation' => 'password',
            'avatar' => $user->avatar,
            'address' => $user->address,
            'phone_number' => $user->phone_number,
            'marketing' => $user->is_marketing,
        ]);
    }

    private function sendLoginRequest(string $email, string $password)
    {
        return $this->postJson('/api/v1/admin/login', [
            'email' => $email,
            'password' => $password,
        ]);
    }
}
